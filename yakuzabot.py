# -*- coding: utf-8 -*-
# @YAKUZA_REF_BOT TELEGRAM
import telebot
from telebot import types
from yakuzacfg import TOKEN, emoji, MONGO_TOKEN
from requests import exceptions
from pymongo import MongoClient
from random import randint
from telebot.apihelper import ApiTelegramException
from telebot.types import ReplyKeyboardRemove
import asyncio
bot = telebot.TeleBot(TOKEN)

mongo = MongoClient(MONGO_TOKEN, port=27017)

telebot = mongo["TelegramBot"]
usrs = telebot["Users"]
admins = telebot["Admins"]
sponsors = telebot["Sponsors"]
out_req = telebot['Withdraw']
comp = telebot['Completed Withdraws']
settings = telebot['Settings']
bans = telebot['Bans']

@bot.message_handler(commands=["start"])
def start_command_handler(message):
    FOUND = True
    ref_st = message.text
    for p in usrs.find({}, {'tgid': 1}):
        if p['tgid'] == message.chat.id:
            FOUND = False
            break
    def mu(message):
        b = ["üê≤ –ë–∞–ª–∞–Ω—Å üê≤", "üéé –ó–∞—Ä–æ–±–∏—Ç–∏ üéé",
             "üçú –ó–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É üçú", "üåã –ü—Ä–∞–≤–∏–ª–∞ üåã",'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä']
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(b[0], b[1])
        markup.add(b[2], b[3])
        markup.add(b[4])
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=markup)
    if FOUND:
        def phone(message):
            keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True,one_time_keyboard=True)
            button_phone = types.KeyboardButton(text="‚òé –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
            keyboard.add(button_phone)
            s = bot.send_message(message.chat.id, 'üìû –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É\n\n‚ñ™Ô∏è–¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —â–æ –≤–∏ —É–∫—Ä–∞—ó–Ω–µ—Ü—å, –Ω–æ–º–µ—Ä –≤—ñ–¥—Ä–∞–∑—É –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π, —Ç–∞ –≤ –ë–∞–∑–∞—Ö –î–∞–Ω–∏—Ö –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è',
                                 reply_markup=keyboard)
            bot.register_next_step_handler(s, login)
        def login(message):
            try:
                if message.contact.first_name == message.chat.first_name:
                    if int(message.contact.phone_number[1:4]) == 380 or int(message.contact.phone_number[0:3]) == 380:
                        bot.send_message(message.chat.id, f"{emoji['yep']}", reply_markup=ReplyKeyboardRemove())
                        res = usrs.insert_one(
                            {'tgid': message.chat.id, 'bal': 0, 'ref': 0, 'pr': '', 'get': 0, 'out': 0,
                             'name': message.from_user.first_name,'sp':1,
                             'nick': bot.get_chat_member(message.chat.id, message.chat.id).user.username})
                        xs = settings.find_one({})
                        settings.update_one({},
                                            {"$set": {'day': xs['day'] + 1}})
                        ref_candidate=''
                        if " " in ref_st:
                            ref_candidate = ref_st.split()[1]
                        try:
                            ref_candidate = int(ref_candidate)
                            if message.chat.id != ref_candidate:
                                link = f"@{bot.get_chat_member(ref_candidate, ref_candidate).user.username}"
                                bot.send_message(message.chat.id, f'{emoji["inf"]} *–í–∏ –±—É–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ñ {link}*',
                                                 parse_mode='Markdown')
                                xus = usrs.find_one({'tgid': ref_candidate})
                                refs = xus['ref']
                                usrs.update_one({'tgid': message.chat.id},
                                                {"$set": {'pr': ref_candidate}})
                                usrs.update_one({'tgid': ref_candidate},
                                                {"$set": {'ref': refs + 1}})
                                bot.send_message(ref_candidate,
                                                 f'*‚Ñπ –ó–∞ –í–∞—à–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ - @{message.from_user.username}*',
                                                 parse_mode='Markdown')
                            else:
                                bot.send_message(message.chat.id, '–ù–µ–º–æ–∂–Ω–∞ –∑–∞–ø—Ä–æ—à—É–≤–∞—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ :)')
                        except Exception:
                            mu(message)
                        check_ch(message)
                    else:
                        bot.send_message(message.chat.id, '–ù–∞ –∂–∞–ª—å, –º–∏ –ø—Ä–∞—Ü—é—î–º–æ –ª–∏—à–µ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏')
                else:
                    bot.send_message(message.chat.id, f'It`s forbidden to resend a contact {emoji["redcr"]}')
                    bans.insert_one({'tgid': int(message.chat.id)})
            except Exception as e:
                print(e)
                bot.send_message(message.chat.id, emoji['vosk'] + ' –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ')
                phone(message)

        phone(message)
        def check_ch(message):
            def ch(message):
                tr = True
                for i in sponsors.find({}, {'_id': 1, 'id': 1, 'nick': 1, 'sub': 1}):
                    try:
                        if i['id'] != 1 and i['id'] != 2 and i['id'] != 3 and i['id'] != 4 and i['id'] != 5 and i[
                            'id'] != 6 and i['id'] != 7 and i['id'] != 8 and i['id'] != 9 and i['id'] != 10:
                            st = bot.get_chat_member(i['id'], message.chat.id).status
                            if st == 'member' or st == 'creator' or st == 'administrator':
                                tr = True
                            else:
                                tr = False
                                return False
                                break
                    except Exception as e:
                        for k in admins.find({}, {'tgid': 1}):
                            try:
                                if str(e) == 'A request to the Telegram API was unsuccessful. Error code: 403. Description: Forbidden: bot is not a member of the channel chat':
                                    bot.send_message(k['tgid'],
                                                     f"*ERROR*\n\nReason: –ë–æ—Ç –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª—ñ/–ë–æ—Ç–∞ –±—É–ª–æ –∫—ñ–∫–Ω—É—Ç–æ\nID: `{i['id']}`",
                                                     parse_mode='Markdown')
                                elif str(
                                        e) == 'A request to the Telegram API was unsuccessful. Error code: 400. Description: Bad Request: chat not found':
                                    bot.send_message(k['tgid'],
                                                     f"*ADMIN ALLERT*\n\nReason: –ù–µ–≤—ñ—Ä–Ω–∏–π –∞–π–¥—ñ –∫–∞–Ω–∞–ª—É\nID: `{i['id']}`",
                                                     parse_mode='Markdown')
                                else:
                                    bot.send_message(k['tgid'],
                                                     f"*ADMIN ALLERT*\n\nReason: {e}\nID: `{i–∞['id']}`",
                                                     parse_mode='Markdown')
                            except Exception:
                                pass
                        if message.chat.id == 5288413290 or message.chat.id == 871076127:
                            return True
                if tr:
                    for i in settings.find({}, {'sp': 1}):
                        sponsub = i['sp']
                        break
                    try:
                        xf = usrs.find_one({'tgid': message.chat.id})
                        sp = xf['sp']
                        if sp != sponsub:
                            usrs.update_one({'tgid': message.chat.id}, {"$set": {'sp': sponsub}})
                            return False
                        else:
                            return True
                    except Exception as e:
                        print(e)
                        usrs.update_one({'tgid': message.chat.id}, {"$set": {'sp': sponsub}})
                        return False
                FOUND = False
                xf = usrs.find_one({'tgid': message.chat.id})

                try:
                    if xf['tgid'] == message.chat.id:
                        FOUND = True
                except Exception:
                    FOUND = False

                isban = True
                for g in bans.find({}, {'tgid': 1}):
                    if g['tgid'] == message.chat.id:
                        isban = False
                        break
            if ch(message):
                try:
                    for l in usrs.find({}, {'tgid': 1, 'bal': 1, 'pr': 1, 'get': 1}):
                        if l['tgid'] == message.chat.id:
                            if l['get'] == 0:
                                for n in settings.find({}, {'ref': 1, 'sht': 1}):
                                    ref_rew = float(n['ref'])
                                    sht = float(n['sht'])
                                    break
                                usrs.update_one({'tgid': message.chat.id},
                                                {"$set": {'get': 1}})
                                xu = usrs.find_one({'tgid': l['pr']})
                                usrs.update_one({'tgid': int(l['pr'])}, {"$set": {'bal': round(xu['bal'] + ref_rew, 2)}})
                                bot.send_message(l['pr'],
                                                 f'üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—ñ–≤, –í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {ref_rew} ‚Ç¥ - @{message.from_user.username}')
                                mu(message)
                            break
                except Exception as e:
                    print(e)
            else:
                inline_k = types.InlineKeyboardMarkup()
                c = 1
                lastsp = settings.find_one({})['lastsp']
                for i in sponsors.find({}, {'nick': 1, 'id': 1}):
                    if i['nick'][len(i['nick']) - 3:len(i['nick'])] == 'bot' or i['nick'][
                                                                                len(i['nick']) - 3:len(
                                                                                    i['nick'])] == 'Bot':
                        inline_bt = types.InlineKeyboardButton(f'({c}) –ë–æ—Ç (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start)', callback_data='vip',
                                                               url=f'https://t.me/{i["nick"]}')
                        inline_k.add(inline_bt)
                        c += 1
                    else:
                        if lastsp != i['id']:
                            inline_bt = types.InlineKeyboardButton(f'({c}) –ö–∞–Ω–∞–ª', callback_data='vip',
                                                                   url=f'https://t.me/{i["nick"]}')
                        else:
                            inline_bt = types.InlineKeyboardButton(f'({c}) –ö–∞–Ω–∞–ª üÜï', callback_data='vip',
                                                                   url=f'https://t.me/{i["nick"]}')
                        inline_k.add(inline_bt)
                        c += 1
                inline_bt = types.InlineKeyboardButton(f'{emoji["yep"]} –ü—ñ–¥–ø–∏—Å–∞–≤—Å—è', callback_data='sub')
                inline_k.add(inline_bt)
                bot.send_message(message.chat.id,
                                 f'*–î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –±—É—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –Ω–∞ –∫–∞–Ω–∞–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—ñ–≤:*',
                                 reply_markup=inline_k, parse_mode='Markdown')
    else:
        b = ["üê≤ –ë–∞–ª–∞–Ω—Å üê≤", "üéé –ó–∞—Ä–æ–±–∏—Ç–∏ üéé",
             "üçú –ó–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É üçú", "üåã –ü—Ä–∞–≤–∏–ª–∞ üåã", 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä']
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(b[0], b[1])
        markup.add(b[2], b[3])
        markup.add(b[4])
        bot.send_message(message.chat.id, f'{emoji["inf"]} *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*', reply_markup=markup,parse_mode='Markdown')


@bot.message_handler(content_types=['text'])
def start_command_handler(message):
    def mu(message):
        b = ["üê≤ –ë–∞–ª–∞–Ω—Å üê≤", "üéé –ó–∞—Ä–æ–±–∏—Ç–∏ üéé",
             "üçú –ó–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É üçú", "üåã –ü—Ä–∞–≤–∏–ª–∞ üåã", 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä']
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(b[0], b[1])
        markup.add(b[2], b[3])
        markup.add(b[4])
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=markup)

    def admink(message):
        def adding(message):
            if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
                admin_panel(message)
            elif len(message.text) == 9 or len(message.text) == 10:
                try:
                    if isinstance(int(message.text), int):
                        tr = True
                        for i in admins.find({}, {'tgid': 1}):
                            if i['tgid'] == message.text:
                                bot.send_message(message.chat.id, '–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —î –∞–¥–º—ñ–Ω–æ–º!')
                                tr = False
                                break
                        if tr:
                            res = admins.insert_one({'tgid': int(message.text)})
                            bot.send_message(message.chat.id, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω–æ–º ' + emoji['yep'])
                        admin_panel(message)
                except TypeError:
                    pass
        def add_admin(message):
            if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
                admin_panel(message)
            else:
                try:
                    if isinstance(int(message.text), int):
                        admins.insert_one({'tgid': int(message.text)})
                        bot.send_message(message.chat.id,f'–£—Å–ø—ñ—Ö ‚úÖ')
                        admin_panel(message)
                except Exception as e:
                    print(e)
                    admin_panel(message)
        def del_admin(message):
            if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
                admin_panel(message)
            else:
                try:
                    if isinstance(int(message.text), int):
                        tru = True
                        for i in admins.find({}, {'tgid': 1}):
                            if int(i['tgid']) == int(message.text):
                                admins.delete_one(i)
                                bot.send_message(message.chat.id, '–£—Å–ø—ñ—Ö ' + emoji['yep'])
                                tru = False
                                break
                        if tru:
                            bot.send_message(message.chat.id, '–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º!')
                        admin_panel(message)
                except Exception as e:
                    print(e)
                    admin_panel(message)
        def nick_sp(message, tgid):
            if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
                admin_panel(message)
            else:
                res = sponsors.insert_one({'id': tgid, 'nick': message.text, 'sub': ['871076127']})
                for i in settings.find({}, {'sp': 1}):
                    sponsub = i['sp']
                    break
                numli=[1,2,3,4,5,6,7,8,9,10]
                if tgid in numli:
                    settings.update_one({'sp': sponsub}, {"$set": {'sp':sponsub+1}})
                settings.update_one({}, {"$set": {'lastsp':tgid}})
                bot.send_message(message.chat.id, '–ö–∞–Ω–∞–ª —î —Å–ø–æ–Ω—Å–æ—Ä–æ–º ' + emoji['yep'])
                admin_panel(message)

        def add_sp(message):
            if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
                admin_panel(message)
            else:
                try:
                    if isinstance(int(message.text), int):
                        tr = True
                        chid=int(message.text)
                        if str(chid)[0]!='-' and chid!=1 and chid!=2 and chid!=3 and chid!=4 and chid!=5 and chid!=6 and chid!=7 and chid!=8 and chid!=9 and chid!=10:
                            chid=int(f'-{chid}')
                        try:
                            for i in sponsors.find({}, {'id': 1}):
                                if int(i['id']) == chid:
                                    bot.send_message(message.chat.id, '–¶–µ–π –∫–∞–Ω–∞–ª –≤–∂–µ —î —Å–ø–æ–Ω—Å–æ—Ä–æ–º!')
                                    tr = False
                                    admin_panel(message)
                                    break
                        except Exception:
                            pass
                        if tr:
                            tgid = int(chid)
                            markup_add = types.ReplyKeyboardMarkup(resize_keyboard=True)
                            markup_add.add(emoji['back'] + ' –ù–∞–∑–∞–¥')
                            k = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å nickname –∫–∞–Ω–∞–ª—É (–±–µ–∑ @)',
                                                 reply_markup=markup_add)
                            bot.register_next_step_handler(k, nick_sp, tgid)
                except Exception as e:
                    print(e)

        def del_sp(message):
            if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
                admin_panel(message)
            else:
                try:
                    if isinstance(int(message.text), int):
                        tru = True
                        chid = int(message.text)
                        if str(chid)[0] != '-' and chid!=1 and chid!=2 and chid!=3 and chid!=4 and chid!=5 and chid!=6 and chid!=7 and chid!=8 and chid!=9 and chid!=10:
                            chid = int(f'-{chid}')
                        for i in sponsors.find({}, {'id': 1}):
                            if int(i['id']) == int(chid):
                                sponsors.delete_one(i)
                                bot.send_message(message.chat.id, '–ö–∞–Ω–∞–ª –±—ñ–ª—å—à–µ –Ω–µ —î —Å–ø–æ–Ω—Å–æ—Ä–æ–º ' + emoji['yep'])
                                tru = False
                                # bot.send_message(871076127, 'del1')
                                break
                        if tru:
                            bot.send_message(message.chat.id, '–¶–µ–π –∫–∞–Ω–∞–ª –Ω–µ —î —Å–ø–æ–Ω—Å–æ—Ä–æ–º!')
                        admin_panel(message)
                except Exception:
                    pass
        def bck(message):
            admin_panel(message)
        async def mail_end(message, txt):
            if message.text == '–ü–Ü–î–¢–í–ï–†–î–ò–¢–ò':
                err = 0
                alus2 = 0
                bot.send_message(message.chat.id, emoji[
                    'inf'] + ' –†–æ–∑—Å–∏–ª–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ\n\n–ù–µ –∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º, –ø–æ–∫–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—ñ')
                msgid=message.message_id+1
                for i in settings.find({}, {'day': 1}):
                    dayus = i['day']
                    break
                for i in usrs.find({}, {'tgid': 1}):
                    try:
                        bot.send_message(i['tgid'], txt,parse_mode='HTML')
                        alus2 += 1
                    except Exception:
                        err += 1
                bot.send_message(message.chat.id,
                                 f"{emoji['inf']} –†–æ–∑—Å–∏–ª–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n\n{emoji['yep']} –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {alus2}\n{emoji['redc']} –ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏: {err}")
                admin_panel(message)
            elif message.text == emoji["back"] + " –ù–∞–∑–∞–¥":
                admin_panel(message)
            else:
                bot.send_message(message.chat.id, '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ')
                admin_panel(message)

        def asyncmail(message, txt):
            asyncio.run(mail_end(message, txt))
        def mailing(message):
            markup_add = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup_add.add(emoji['back'] + ' –ù–∞–∑–∞–¥')
            if message.text == emoji["back"] + " –ù–∞–∑–∞–¥":
                admin_panel(message)
            else:
                txt = str(message.text)
                k = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å `–ü–Ü–î–¢–í–ï–†–î–ò–¢–ò`, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è',
                                     reply_markup=markup_add,parse_mode='Markdown')
                bot.register_next_step_handler(k, asyncmail, txt)
        def out_new(message):
            try:
                if isinstance(float(message.text), float):
                    for l in settings.find({}, {'out': 1}):
                        settings.update_one({'out': l['out']}, {"$set": {'out': float(message.text)}})
                        bot.send_message(message.chat.id, '–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ ' + emoji['yep'])
                        sett(message)
                        break
            except Exception:
                sett(message)

        def ref_new(message):
            try:
                if isinstance(float(message.text), float):
                    for l in settings.find({}, {'ref': 1}):
                        settings.update_one({'ref': l['ref']}, {"$set": {'ref': float(message.text)}})
                        bot.send_message(message.chat.id, '–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ ' + emoji['yep'])
                        sett(message)
                        break
            except Exception:
                sett(message)
        def shtraf_new(message):
            if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
                admin_panel(message)
            try:
                if isinstance(float(message.text), float):
                    for l in settings.find({}, {'sht': 1}):
                        settings.update_one({'sht': l['sht']}, {"$set": {'sht': float(message.text)}})
                        bot.send_message(message.chat.id, '–®—Ç—Ä–∞—Ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ ' + emoji['yep'])
                        sett(message)
                        break
            except Exception:
                sett(message)
        def sett_ch(message):
            if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
                admin_panel(message)
            elif message.text == '–ú—ñ–Ω. –≤–∏–≤—ñ–¥':
                k = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è')
                bot.register_next_step_handler(k, out_new)
            elif message.text == '–û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–µ—Ñ.':
                k = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞')
                bot.register_next_step_handler(k, ref_new)
            elif message.text == '–®—Ç—Ä–∞—Ñ –∑–∞ –≤—ñ–¥–ø–∏—Å–∫—É':
                markup_se = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup_se.add(emoji['back'] + ' –ù–∞–∑–∞–¥')
                for l in settings.find({}, {'sht': 1}):
                    sht = l['sht']
                    break
                k = bot.send_message(message.chat.id,
                                     f'–®—Ç—Ä–∞—Ñ –∑–∞ –≤—ñ–¥–ø–∏—Å–∫—É: {sht} ‚Ç¥\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ –≤—ñ–¥–ø–∏—Å–∫—É',
                                     reply_markup=markup_se)
                bot.register_next_step_handler(k, shtraf_new)
            else:
                bot.send_message(message.chat.id, '–ù–µ —Ä–æ–∑—É–º—ñ—é –í–∞—Å ' + emoji['bor'])
                sett(message)

        def sett(message):
            markup_set = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup_set.add('–ú—ñ–Ω. –≤–∏–≤—ñ–¥','–û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–µ—Ñ.')
            markup_set.add('–®—Ç—Ä–∞—Ñ –∑–∞ –≤—ñ–¥–ø–∏—Å–∫—É')
            markup_set.add(emoji['back'] + ' –ù–∞–∑–∞–¥')
            k = bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å:', reply_markup=markup_set)
            bot.register_next_step_handler(k, sett_ch)
        markup_add = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup_add.add(emoji['back'] + ' –ù–∞–∑–∞–¥')

        def adding_bal(message, balan, tgid):
            try:
                if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
                    admin_panel(message)
                elif isinstance(float(message.text), float):
                    usrs.update_one({'tgid': tgid}, {"$set": {'bal': balan + float(message.text)}})
                    bot.send_message(message.chat.id, '–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–æ ' + emoji['yep'])
                    bot.send_message(tgid, f'–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ {message.text} ‚Ç¥ {emoji["star"]}')
                    admin_panel(message)
                else:
                    admin_panel(message)
            except Exception as e:
                admin_panel(message)

        def add_bal(message):
            try:
                if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
                    admin_panel(message)
                elif isinstance(int(message.text), int):
                    for u in usrs.find({}, {'tgid': 1, 'bal': 1}):
                        if u['tgid'] == int(message.text):
                            balan = float(u['bal'])
                            tgid = int(u['tgid'])
                            k = bot.send_message(message.chat.id,
                                                 f'{emoji["man"]} –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á - <a href="tg://user?id={tgid}">USER</a>\n{emoji["monbag"]} –ë–∞–ª–∞–Ω—Å - {balan} ‚Ç¥\n\n{emoji["tri"]}–í–≤–µ–¥—ñ—Ç—å —Å—É–º–º—É, —è–∫—É —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –¥–æ –±–∞–ª–∞–Ω—Å–∞',
                                                 parse_mode="HTML", reply_markup=markup_add)
                            bot.register_next_step_handler(k, adding_bal, balan, tgid)
                            break
                else:
                    admin_panel(message)
            except Exception:
                bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π TelegramID ' + emoji['red'])
                admin_panel(message)
        def searchus(message):
            if message.text == emoji["back"] + ' –ù–∞–∑–∞–¥':
                admin_panel(message)
            else:
                try:
                    tgid=int(message.text)
                    xf = usrs.find_one({'tgid': tgid})
                    if xf['tgid']==tgid:
                        inline_s = types.InlineKeyboardMarkup()
                        inline_b1 = types.InlineKeyboardButton('üî¥–ë–∞–Ω', callback_data=f'ban{int(tgid)}')
                        inline_b2 = types.InlineKeyboardButton('üü¢–†–æ–∑–±–∞–Ω', callback_data=f'unb{int(tgid)}')
                        inline_s.add(inline_b1, inline_b2)
                        bot.send_message(message.chat.id,f'<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</b>\n\n<b>TelegramID:</b> <code>{xf["tgid"]}</code>\n<b>Username:</b> @{bot.get_chat_member(xf["tgid"], xf["tgid"]).user.username}\n<b>User link:</b> <a href="tg://user?id={xf["tgid"]}">link</a>\n<b>Invited by:</b> <code>{xf["pr"]}</code>\n<b>Balance:</b> <code>{xf["bal"]}</code>\n<b>Referals:</b> <code>{xf["ref"]}</code>\n<b>Withdraw:</b> <code>{xf["out"]}</code>',parse_mode='HTML',reply_markup=inline_s)
                    else:
                        bot.send_message(message.chat.id,f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ {emoji["redcr"]}')
                    admin_panel(message)
                except Exception:
                    bot.send_message(message.chat.id,f'{emoji["redcr"]} –ù–µ–≤—ñ—Ä–Ω–∏–π ID')
                    admin_panel(message)


        if message.text == emoji['fl'] + ' –í–∏–≤–µ–¥–µ–Ω–Ω—è':
            approving_out_admin(message)
        elif message.text == emoji['green'] + ' –î–æ–¥–∞—Ç–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞':
            k = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å TelegramID —Å–ø–æ–Ω—Å–æ—Ä–∞ (–∫–∞–Ω–∞–ª—É)', reply_markup=markup_add)
            bot.register_next_step_handler(k, add_sp)
        elif message.text == emoji['paper'] + ' –í—Å—ñ —Å–ø–æ–Ω—Å–æ—Ä–∏':
            txt = ''
            c = 1
            for i in sponsors.find({}, {'id': 1, 'nick': 1}):
                txt += f"{c}. <a href='https://t.me/{i['nick']}'>Channel ‚Ññ{c}</a>\nID = {i['id']}\n"
                c += 1
            try:
                k = bot.send_message(message.chat.id, txt, parse_mode='HTML')
            except Exception:
                k = bot.send_message(message.chat.id, 'empty', parse_mode='HTML')
            bot.register_next_step_handler(k, admink)
        elif message.text == emoji['red'] + ' –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞':
            k = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å TelegramID —Å–ø–æ–Ω—Å–æ—Ä–∞ (–∫–∞–Ω–∞–ª—É)', reply_markup=markup_add)
            bot.register_next_step_handler(k, del_sp)
        elif message.text == emoji['green'] + ' –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞':
            k = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å TelegramID –∞–¥–º—ñ–Ω–∞', reply_markup=markup_add)
            bot.register_next_step_handler(k, add_admin)
        elif message.text == emoji['paper'] + ' –í—Å—ñ –∞–¥–º—ñ–Ω–∏':
            txt = ''
            c = 1
            for i in admins.find({}, {'tgid': 1}):
                txt += f"{c}. @{bot.get_chat_member(i['tgid'], i['tgid']).user.username}\nTGID = <code>{i['tgid']}</code>\n"
                c += 1
            k = bot.send_message(message.chat.id, txt, parse_mode='HTML')
            bot.register_next_step_handler(k, admink)
        elif message.text == emoji['red'] + ' –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞':
            k = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å TelegramID –∞–¥–º—ñ–Ω–∞', reply_markup=markup_add)
            bot.register_next_step_handler(k, del_admin)
        elif message.text == emoji["mai"] + ' –†–æ–∑—Å–∏–ª–∞–Ω–Ω—è':
            k = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º\n\n`<b></b>` - *–∂–∏—Ä–Ω–∏–π*\n`<code></code>` -`copyable`\n`<a href='google.com'>text</a>` - –ü–æ—Å–∏–ª–∞–Ω–Ω—è",
                                 reply_markup=markup_add,parse_mode='Markdown')
            bot.register_next_step_handler(k, mailing)
        elif message.text == emoji['gear'] + ' –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è':
            sett(message)
        elif message.text == emoji['monbag'] + ' –ë–∞–ª–∞–Ω—Å':
            markup_ad = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup_ad.add(emoji['back'] + ' –ù–∞–∑–∞–¥')
            k = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å TelegramID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', reply_markup=markup_ad)
            bot.register_next_step_handler(k, add_bal)
        elif message.text==emoji['monbag']+' –í—Å—ñ –∑–∞—è–≤–∫–∏':
            pr=0
            cnt=1
            txt=''
            try:
                for k in out_req.find({}, {"tgid": 1, 'Card': 1, 'Sum': 1}):
                    txt+=f'{cnt}.\nUser: <b>@{bot.get_chat_member(k["tgid"],k["tgid"]).user.username}</b>\nWallet: <code>{k["Card"]}</code>\nSum: <code>{k["Sum"]}</code>\n'
                    cnt+=1
                    pr+=k["Sum"]
            except Exception:
                txt=f'–ó–∞—è–≤–æ–∫ –Ω–µ–º–∞—î {emoji["yep"]}'
            k=bot.send_message(message.chat.id,f'{txt}\n\n{emoji["fl"]} <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {pr}</b>',parse_mode='HTML')
            bot.register_next_step_handler(k, admink)
        elif message.text=='üîç –ü–æ—à—É–∫':
            k=bot.send_message(message.chat.id,f'üîç –î–ª—è –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ–¥—ñ—Ç—å TelegramID:',reply_markup=markup_add)
            bot.register_next_step_handler(k,searchus)
        elif message.text == emoji['back'] + ' –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
            mu(message)
        else:
            bot.send_message(message.chat.id, '–ù–µ —Ä–æ–∑—É–º—ñ—é –í–∞—Å ' + emoji['bor'])
            admin_panel(message)

    def admin_panel(message):
        markup_admin = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup_admin.add(emoji['monbag']+' –í—Å—ñ –∑–∞—è–≤–∫–∏')
        markup_admin.add(emoji['fl'] + ' –í–∏–≤–µ–¥–µ–Ω–Ω—è',emoji["mai"] + ' –†–æ–∑—Å–∏–ª–∞–Ω–Ω—è',emoji['gear'] + ' –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
        markup_admin.add(emoji['monbag'] + ' –ë–∞–ª–∞–Ω—Å','üîç –ü–æ—à—É–∫')
        markup_admin.add(emoji['green'] + ' –î–æ–¥–∞—Ç–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞', emoji['paper'] + ' –í—Å—ñ —Å–ø–æ–Ω—Å–æ—Ä–∏',
                         emoji['red'] + ' –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞')
        markup_admin.add(emoji['green'] + ' –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞', emoji['paper'] + ' –í—Å—ñ –∞–¥–º—ñ–Ω–∏',
                         emoji['red'] + ' –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞')
        markup_admin.add(emoji['back'] + ' –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
        t = bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é', reply_markup=markup_admin)
        bot.register_next_step_handler(t, admink)
    def choosing_admin(message):
        out_req_comp = telebot['Completed Withdraws']
        req = list(out_req.find({}, {"tgid": 1, 'Card': 1, 'Sum': 1, 'Refs': 1}))
        if message.text == emoji["yep"] + " –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
            completed_req = {"tgid": req[0]["tgid"], 'Card': req[0]["Card"], 'Refs': req[0]['Refs'],
                             "Sum": req[0]["Sum"]}
            completed_req1 = {"tgid": req[0]["tgid"], 'Card': req[0]["Card"], "Sum": req[0]["Sum"]}
            out_req.delete_one(completed_req)
            res = out_req_comp.insert_one(completed_req1)
            bot.send_message(message.chat.id, "–ó–∞–ø–∏—Ç –ø—ñ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            for us in usrs.find({}, {'_id': 1, 'tgid': 1, "out": 1}):
                if us['tgid'] == req[0]['tgid']:
                    usrs.update_one({'tgid': us['tgid']}, {"$set": {'out': us['out'] + req[0]['Sum']}})
            bot.send_message(completed_req['tgid'],
                             f"üîî –ó—Ä–æ–±–ª–µ–Ω–æ –≤–∏–ø–ª–∞—Ç—É –≤ —Ä–æ–∑–º—ñ—Ä—ñ {req[0]['Sum']} ‚Ç¥, –Ω–∞ –∫–∞—Ä—Ç–∫—É: {req[0]['Card']}")
            approving_out_admin(message)
        elif message.text == emoji['redc'] + " –í—ñ–¥—Ö–∏–ª–∏—Ç–∏":
            completed_req = {"tgid": req[0]["tgid"], 'Card': req[0]["Card"],
                             "Sum": req[0]["Sum"]}
            out_req.delete_one(completed_req)
            bot.send_message(message.chat.id, "–ó–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
            for us in usrs.find({}, {'_id': 1, 'tgid': 1, "bal": 1, 'ref': 1}):
                if us['tgid'] == req[0]['tgid']:
                    usrs.update_one({'tgid': us['tgid']}, {"$set": {'bal': us['bal'] + req[0]['Sum']}})
            bot.send_message(completed_req['tgid'],
                             f"–í–∞—à  –∑–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ :(\n–ú–æ–∂–ª–∏–≤–æ, –í–∏ –Ω–∞–¥–∞–ª–∏ —Ö–∏–±–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∞–±–æ –ø–æ—Ä—É—à–∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞\n–î–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            approving_out_admin(message)
        elif message.text == emoji['back'] + " –ù–∞–∑–∞–¥":
            admin_panel(message)

    def approving_out_admin(message):
        req = list(out_req.find({}, {"tgid": 1, 'Card': 1, 'Sum': 1, 'Refs': 1}))
        markup_ap = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup_ap.add(emoji["yep"] + ' –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', emoji['redc'] + " –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", emoji["back"] + " –ù–∞–∑–∞–¥")

        def backm(message):
            if message.text == emoji["back"] + " –ù–∞–∑–∞–¥":
                admin_panel(message)

        try:
            if len(req) == 1:
                bot.send_message(message.chat.id, f"–£ –≤–∞—Å 1 –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç")
            elif len(req) > 1:
                bot.send_message(message.chat.id, f"–£ –≤–∞—Å {len(req)} –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤")
            link = f'<a href="tg://user?id={req[0]["tgid"]}">USER</a>'
            name=bot.get_chat_member(req[0]["tgid"], req[0]["tgid"]).user.username
            req_txt = f'User ID: <code>{req[0]["tgid"]}</code>\nUser: {link}\n@{name}\n–ö–∞—Ä—Ç–∫–∞: <code>{req[0]["Card"]}</code>\n–ó–∞–ø—Ä–æ—Å–∏–≤: <b>{req[0]["Refs"]}</b>\n–°—É–º–∞: <code>{req[0]["Sum"]}</code>'
            s = bot.send_message(message.chat.id, req_txt, reply_markup=markup_ap, parse_mode='HTML')
            bot.register_next_step_handler(s, choosing_admin)
        except IndexError:
            bot.send_message(message.chat.id, "–ó–∞–ø–∏—Ç—ñ–≤ –Ω–µ–º–∞—î!")
            admin_panel(message)

    def ask_mon(message):
        if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
            mu(message)
        elif len(str(message.text))==16:
            user_card = str(message.text)
            for us in usrs.find({}, {'tgid': 1, "bal": 1}):
                if us['tgid'] == message.chat.id:
                    for l in settings.find({}, {'out': 1}):
                        min_out = l['out']
                        break
                    user_bal = us['bal']
                    m = bot.send_message(message.chat.id,
                                         f'{emoji["vosk"]} –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É ‚Ç¥ —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏–≤–µ—Å—Ç–∏\n\n [–í—ñ–¥ {min_out}‚Ç¥]\n\n{emoji["dol"]} –í–∞—à –±–∞–ª–∞–Ω—Å {us["bal"]} ‚Ç¥')
                    bot.register_next_step_handler(m, approving_out, user_card, user_bal)
                    break
        else:
            bot.send_message(message.chat.id, '–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ' + emoji['bor'])
            card(message)

    def approving_out(message, user_card, user_bal):
        try:
            if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
                mu(message)
            elif isinstance(float(message.text), float):
                for i in settings.find({}, {'out': 1, 'ref': 1}):
                    min_out = float(i['out'])
                if user_bal >= float(message.text):
                    if float(message.text) >= min_out:
                        mb = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
                        mb.add(emoji['back'] + ' –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
                        for us in usrs.find({}, {'_id': 1, 'tgid': 1, "bal": 1, 'ref': 1}):
                            if us['tgid'] == message.chat.id:
                                suma = float(message.text)
                                usrs.update_one({'_id': us['_id']}, {"$set": {'bal': us['bal'] - suma}})
                                out_request = {'tgid': message.chat.id, 'Card': user_card, 'Refs': us['ref'],
                                               'Sum': suma}
                                res = out_req.insert_one(out_request)
                                break
                        p = bot.send_message(message.chat.id,
                                             '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–∞, —Ç–∞ –π–¥–µ –Ω–∞ –æ–±—Ä–æ–±–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º ' + emoji[
                                                 'party'], reply_markup=mb)
                        try:
                            bot.send_message(5288413290,f'{emoji["fl"]} +1 –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–ø–ª–∞—Ç—É')
                        except Exception:
                            pass
                        bot.register_next_step_handler(p, back)
                    else:
                        bot.send_message(message.chat.id,
                                         emoji['vosk'] + f' –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è - {min_out} ‚Ç¥')
                        mu(message)
                else:
                    bot.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ ' + emoji['bor'])
                    mu(message)
        except Exception as e:
            print(e)
            bot.send_message(message.chat.id, emoji['vosk'] + ' –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω–Ω—ñ!')
            mu(message)

    def back(message):
        if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
            mu(message)
        elif message.text == emoji['back'] + ' –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
            mu(message)
        else:
            bot.send_message(message.chat.id, '–ù–µ —Ä–æ–∑—É–º—ñ—é –í–∞—Å ' + emoji['bor'])
            mu(message)

    def card(message):
        mb = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        mb.add(emoji['back'] + ' –ù–∞–∑–∞–¥')
        for i in settings.find({}, {'out': 1, 'ref': 1}):
            min_out = float(i['out'])
            break
        xusc = usrs.find_one({'tgid': message.chat.id})
        balan = xusc['bal']
        if balan >= min_out:
            l = bot.send_message(message.chat.id, emoji[
                'card'] + f'*–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –í–∞—à–æ—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∫–∏ üá∫üá¶\n\n{emoji["redc"]} –ü—Ä–∏–∫–ª–∞–¥ :\n\n4441114402211329*',
                                 reply_markup=mb,parse_mode="Markdown")
            bot.register_next_step_handler(l, ask_mon)
        else:
            bot.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ ' + emoji['bor'])
            mu(message)
    def prov(message):
        if message.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
            mu(message)
        elif message.text == '–ù–∞ –∫–∞—Ä—Ç–∫—É ' + emoji["ua"]:
            card(message)
    def menu(message):
        def mu(message):
            b = ["üê≤ –ë–∞–ª–∞–Ω—Å üê≤", "üéé –ó–∞—Ä–æ–±–∏—Ç–∏ üéé",
                 "üçú –ó–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É üçú", "üåã –ü—Ä–∞–≤–∏–ª–∞ üåã", 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä']
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(b[0], b[1])
            markup.add(b[2], b[3])
            markup.add(b[4])
            bot.send_message(message.chat.id, "*–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é:*", reply_markup=markup,parse_mode='Markdown')
        def ch(message):
            tr = True
            for i in sponsors.find({}, {'_id': 1, 'id': 1, 'nick': 1, 'sub': 1}):
                try:
                    if i['id'] != 1 and i['id']!=2 and i['id']!=3 and i['id']!=4 and i['id']!=5 and i['id']!=6 and i['id']!=7 and i['id']!=8 and i['id']!=9 and i['id']!=10:
                        st = bot.get_chat_member(i['id'], message.chat.id).status
                        if st == 'member' or st == 'creator' or st == 'administrator':
                            tr = True
                        else:
                            tr = False
                            return False
                            break
                except Exception as e:
                    for k in admins.find({}, {'tgid': 1}):
                        try:
                            if str(e) == 'A request to the Telegram API was unsuccessful. Error code: 403. Description: Forbidden: bot is not a member of the channel chat':
                                bot.send_message(k['tgid'],
                                                 f"*ERROR*\n\nReason: –ë–æ—Ç –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª—ñ/–ë–æ—Ç–∞ –±—É–ª–æ –∫—ñ–∫–Ω—É—Ç–æ\nID: `{i['id']}`",
                                                 parse_mode='Markdown')
                            elif str(e) == 'A request to the Telegram API was unsuccessful. Error code: 400. Description: Bad Request: chat not found':
                                bot.send_message(k['tgid'],
                                                 f"*ADMIN ALLERT*\n\nReason: –ù–µ–≤—ñ—Ä–Ω–∏–π –∞–π–¥—ñ –∫–∞–Ω–∞–ª—É\nID: `{i['id']}`",
                                                 parse_mode='Markdown')
                            else:
                                bot.send_message(k['tgid'],
                                                 f"*ADMIN ALLERT*\n\nReason: {e}\nID: `{i–∞['id']}`",
                                                 parse_mode='Markdown')
                        except Exception:
                            pass
                    if message.chat.id == 5288413290 or message.chat.id == 871076127:
                        return True
            if tr:
                for i in settings.find({}, {'sp': 1}):
                    sponsub = i['sp']
                    break
                try:
                    xf = usrs.find_one({'tgid': message.chat.id})
                    sp=xf['sp']
                    if sp!=sponsub:
                        usrs.update_one({'tgid': message.chat.id}, {"$set": {'sp': sponsub}})
                        return False
                    else:
                        return True
                except Exception as e:
                    print(e)
                    usrs.update_one({'tgid': message.chat.id}, {"$set": {'sp':sponsub}})
                    return False

        FOUND = False
        xf = usrs.find_one({'tgid': message.chat.id})

        try:
            if xf['tgid'] == message.chat.id:
                FOUND = True
        except Exception:
            FOUND=False

        isban = True
        for g in bans.find({}, {'tgid': 1}):
            if g['tgid'] == message.chat.id:
                isban = False
                break
        if ch(message):
            try:
                for l in usrs.find({}, {'tgid': 1, 'bal': 1,'pr':1,'get':1}):
                    if l['tgid']==message.chat.id:
                        if l['get']==0:
                            for n in settings.find({}, {'ref': 1,'sht':1}):
                                ref_rew = float(n['ref'])
                                sht = float(n['sht'])
                                break
                            usrs.update_one({'tgid': message.chat.id},
                                            {"$set": {'get':1}})
                            xu = usrs.find_one({'tgid': l['pr']})
                            usrs.update_one({'tgid': int(l['pr'])}, {"$set": {'bal': round(xu['bal'] + sht,2)}})
                        break
            except Exception as e:
                print(e)
            if FOUND:
                if isban:
                    xus = usrs.find_one({'tgid': message.chat.id})
                    b = ["üê≤ –ë–∞–ª–∞–Ω—Å üê≤", "üéé –ó–∞—Ä–æ–±–∏—Ç–∏ üéé",
                         "üçú –ó–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É üçú", "üåã –ü—Ä–∞–≤–∏–ª–∞ üåã"]
                    if message.text == "üçú –ó–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É üçú":
                        xs = settings.find_one({})
                        inline_k = types.InlineKeyboardMarkup()
                        inline_bt = types.InlineKeyboardButton(f"üí´ –ó–≤'—è–∑–∞—Ç–∏—Å—å",callback_data='vip', url=f'https://t.me/bodya_kulinish')
                        inline_k.add(inline_bt)
                        bot.send_message(message.chat.id,
                                             f'*üî∞–°—Ç–∞—Ç–∏ —Å–ø–æ–Ω—Å–æ—Ä–æ–º Yakuza, –¥–ª—è –ø—ñ–∞—Ä—É —Å–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n\n\nüéé–í–∞—à –∫–∞–Ω–∞–ª –±—É–¥–µ –≤ —Å–ø–æ–Ω—Å–æ—Ä–∞—Ö, —è–∫–∏–π –≤—Å—ñ –±–∞—á—É—Ç—å –Ω–∞ –ø–æ—á–∞—Ç–∫—É\n\nüêâ–†–æ–∑—Å–∏–ª–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –±–æ—Ç—ñ\n\nüçø–ù–∞—à—ñ –ª—é–¥–∏ —Ü–µ —Å—É—Ç–æ UA –∞—É–¥–∏—Ç–æ—Ä—ñ—è\n\nüéê–Ø–∫—â–æ –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–æ –ø–∏—à–∏—Ç—å –≤ –æ—Å–æ–±–∏—Å—Ç—ñ, —Ç–∞–º –≤—Å–µ –±—É–¥–µ –≤ –ø–æ–¥—Ä–æ–±–∏—Ü—è—Ö.*',parse_mode='Markdown',reply_markup=inline_k)
                    elif message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä':
                        xs = settings.find_one({})
                        day=xs['day']
                        bot.send_message(message.chat.id,f'*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—î–∫—Ç–∞:*\n\nüë®‚Äçüíª –õ—é–¥–µ–π –≤ –ø—Ä–æ—î–∫—Ç—ñ: {day}\nüïê –°—Ç–∞—Ä—Ç –±–æ—Ç–∞: XX.08.23',parse_mode='Markdown')
                    elif message.text=="üåã –ü—Ä–∞–≤–∏–ª–∞ üåã":
                        bot.send_message(message.chat.id,f'*‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±—É–∫—Å–æ–º, —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –Ω–∞–±—ñ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤, –≤–∑–∞—î–º–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞, –º—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–∏ —ñ —Ç–æ–º—É –ø–æ–¥—ñ–±–Ω–µ - –æ–¥—Ä–∞–∑—É –±–∞–Ω!\n\n‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –ø–æ—à–∏—Ä—é–≤–∞—Ç–∏ –Ω–µ–ø—Ä–∞–≤–¥–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é "–ë–æ—Ç –ø–ª–∞—Ç–∏—Ç—å 5-10 –≥—Ä–Ω —ñ —Ç.–¥" - –∞–Ω—É–ª—é–≤–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –±–∞–ª–∞–Ω—Å—É!\n\n‚úÖ –ë–æ—Ç —Å—É—Ç–æ –ª–∏—à–µ –¥–ª—è UA –∞—É–¥–∏—Ç–æ—Ä—ñ—ó!\n\n‚úÖ –î–æ–∑–≤–æ–ª–µ–Ω–æ —Å–ø–∞–º–∏—Ç–∏ –ø–æ —á–∞—Ç–∞–º/–∫–∞–Ω–∞–ª–∞–º –ø—Ä–æ "–±–æ—Ç, —è–∫–∏–π –ü–ª–∞—Ç–∏—Ç—å"*',parse_mode='Markdown')
                    elif message.text == "üê≤ –ë–∞–ª–∞–Ω—Å üê≤":
                        refs = xus['ref']
                        balance = xus['bal']
                        pr = xus['pr']
                        out = xus['out']
                        inline_k = types.InlineKeyboardMarkup()
                        inline_bt = types.InlineKeyboardButton(f"üí∏ –í–∏–≤–µ—Å—Ç–∏ –∫–æ—à—Ç–∏", callback_data='withdraw')
                        inline_k.add(inline_bt)
                        bot.send_message(message.chat.id,f"üì± –Ü–º'—è: <b>{message.from_user.first_name}</b>\nüÜî ID: <code>{message.chat.id}</code>\n\nüíµ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance}‚Ç¥\n\nüë®‚Äçüëß‚Äçüë¶<b>–ó–∞–ø—Ä–æ—à–µ–Ω–æ:</b> {refs}\nüôã <b>–í–∞—Å –ø—Ä–∏–≤—ñ–≤:</b> {f'@{bot.get_chat_member(pr, pr).user.username}' if len(str(pr))>1 else '–Ω—ñ—Ö—Ç–æ'}\n„Ä∞Ô∏è „Ä∞Ô∏è „Ä∞Ô∏è „Ä∞Ô∏è „Ä∞Ô∏è „Ä∞Ô∏è „Ä∞Ô∏è „Ä∞Ô∏è „Ä∞Ô∏è\nüí≥ <b>–í–∏–≤–µ–¥–µ–Ω–æ:</b> {out}‚Ç¥",parse_mode='HTML',reply_markup=inline_k)
                    elif message.text=="üéé –ó–∞—Ä–æ–±–∏—Ç–∏ üéé":
                        xs = settings.find_one({})
                        usc=xs['day']
                        ref_rew = xs['ref']
                        bot.send_message(message.chat.id,f'*üåã–°–∫–æ–ø—ñ—é–π—Ç–µ —Å–≤–æ—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —ñ –ø–æ—à–∏—Ä—é–π—Ç–µ –º–∞—Å–æ–≤–æ –ª—é–¥—è–º\n\n\nüçø–ó–∞ –∫–æ–∂–Ω—É –ª—é–¥–∏–Ω—É –≤–∞–º –±—É–¥–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ ‚Ç¥ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å\n\n\nüí•–¶–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∞—à–µ —ñ –π–æ–≥–æ —Ç—Ä–µ–±–∞ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏:\n\nüë∫ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è -\n\nhttps://t.me/Yakuza_ref_bot?start={message.chat.id}\n\n‚ö†Ô∏è–ó–∞—Ä–æ–±–ª—è–π—Ç–µ –Ω–µ –≤–∫–ª–∞–¥–∞—é—á–∏—Å—å, –≤ –±–æ—Ç—ñ\n\n‚úÖ–ó–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ* `{ref_rew}‚Ç¥`',parse_mode='Markdown')
                    elif message.text == '/admin' or message.text == 'admin':
                        k = True
                        for i in admins.find({}, {'tgid': 1}):
                            if int(i['tgid']) == message.chat.id:
                                t = bot.send_message(message.chat.id, f'*–í—ñ—Ç–∞—é, @{bot.get_chat_member(message.chat.id, message.chat.id).user.username}!*',parse_mode='Markdown')
                                admin_panel(message)
                                k = False
                                break
                        if k:
                            bot.send_message(message.chat.id, '–ù–µ —Ä–æ–∑—É–º—ñ—é –í–∞—Å ' + emoji['bor'])
                            mu(message)
                    else:
                        bot.send_message(message.chat.id, '–ù–µ —Ä–æ–∑—É–º—ñ—é –í–∞—Å ' + emoji['bor'])
                        mu(message)
                else:
                    bot.send_message(message.chat.id, emoji['redc'] + ' –í–∏ –±—É–ª–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ –±–æ—Ç—ñ')
            else:
                mu(message)
        else:
            try:
                for l in usrs.find({}, {'tgid': 1, 'bal': 1, 'pr': 1, 'get': 1}):
                    if l['tgid'] == message.chat.id:
                        if l['get'] == 1:
                            for k in settings.find({}, {'sht': 1}):
                                sht = k['sht']
                                break
                            usrs.update_one({'tgid': message.chat.id},
                                            {"$set": {'get': 0}})
                            xu = usrs.find_one({'tgid': l['pr']})
                            usrs.update_one({'tgid': l['pr']}, {"$set": {'bal': round(xu['bal'] - sht, 2)}})
                            bot.send_message(l['pr'],f'{emoji["inf"]} @{message.from_user.username} –≤—ñ–¥–ø–∏—Å–∞–≤—Å—è –≤—ñ–¥ —Å–ø–æ–Ω—Å–æ—Ä—ñ–≤, –∑–Ω—è—Ç–æ {sht} ‚Ç¥')
                        break
            except Exception as e:
                pass
            inline_k = types.InlineKeyboardMarkup()
            c = 1
            lastsp=settings.find_one({})['lastsp']
            for i in sponsors.find({}, {'nick': 1,'id':1}):
                if i['nick'][len(i['nick']) - 3:len(i['nick'])] == 'bot' or i['nick'][
                                                                            len(i['nick']) - 3:len(
                                                                                i['nick'])] == 'Bot':
                    inline_bt = types.InlineKeyboardButton(f'({c}) –ë–æ—Ç (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start)', callback_data='vip',
                                                           url=f'https://t.me/{i["nick"]}')
                    inline_k.add(inline_bt)
                    c += 1
                else:
                    if lastsp!=i['id']:
                        inline_bt = types.InlineKeyboardButton(f'({c}) –ö–∞–Ω–∞–ª', callback_data='vip',
                                                               url=f'https://t.me/{i["nick"]}')
                    else:
                        inline_bt = types.InlineKeyboardButton(f'({c}) –ö–∞–Ω–∞–ª üÜï', callback_data='vip',
                                                               url=f'https://t.me/{i["nick"]}')
                    inline_k.add(inline_bt)
                    c += 1
            inline_bt = types.InlineKeyboardButton(f'{emoji["yep"]} –ü—ñ–¥–ø–∏—Å–∞–≤—Å—è', callback_data='sub1')
            inline_k.add(inline_bt)
            bot.send_message(message.chat.id, f'{emoji["redcr"]}')
            bot.send_message(message.chat.id,
                             f'*–î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –±—É—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –Ω–∞ –∫–∞–Ω–∞–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—ñ–≤:*',
                             reply_markup=inline_k, parse_mode='Markdown')
    menu(message)



@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    global markup
    b = ["üê≤ –ë–∞–ª–∞–Ω—Å üê≤", "üéé –ó–∞—Ä–æ–±–∏—Ç–∏ üéé",
         "üçú –ó–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É üçú", "üåã –ü—Ä–∞–≤–∏–ª–∞ üåã", 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä']
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(b[0], b[1])
    markup.add(b[2], b[3])
    markup.add(b[4])
    def approving_out(call, user_card, user_bal):
        try:
            if call.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
                bot.send_message(call.from_user.id, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=markup)
            elif isinstance(float(call.text), float):
                for i in settings.find({}, {'out': 1, 'ref': 1}):
                    min_out = float(i['out'])
                if user_bal >= float(call.text):
                    if float(call.text) >= min_out:
                        for us in usrs.find({}, {'_id': 1, 'tgid': 1, "bal": 1, 'ref': 1}):
                            if us['tgid'] == call.from_user.id:
                                suma = float(call.text)
                                usrs.update_one({'tgid': us['tgid']}, {"$set": {'bal': us['bal'] - suma}})
                                out_request = {'tgid': call.from_user.id, 'Card': user_card, 'Refs': us['ref'],
                                               'Sum': suma}
                                res = out_req.insert_one(out_request)
                                break
                        bot.send_message(call.from_user.id,
                                             '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–∞, —Ç–∞ –π–¥–µ –Ω–∞ –æ–±—Ä–æ–±–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º ' + emoji[
                                                 'party'], reply_markup=markup)
                        try:
                            bot.send_message(824982798,f'{emoji["fl"]} +1 –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–ø–ª–∞—Ç—É')
                        except Exception:
                            pass
                    else:
                        bot.send_message(call.from_user.id,
                                         emoji['vosk'] + f' –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è - {min_out} ‚Ç¥',reply_markup=markup)
                else:
                    bot.send_message(call.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ ' + emoji['bor'],reply_markup=markup)
        except Exception as e:
            print(e)
            bot.send_message(call.from_user.id, emoji['vosk'] + ' –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω–Ω—ñ!',reply_markup=markup)
    def ask_mon(call):
        if call.text == emoji['back'] + ' –ù–∞–∑–∞–¥':
            bot.send_message(call.from_user.id,'–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',reply_markup=markup)
        elif len(str(call.text))==16:
            user_card = str(call.text)
            for us in usrs.find({}, {'tgid': 1, "bal": 1}):
                if us['tgid'] == call.from_user.id:
                    for l in settings.find({}, {'out': 1}):
                        min_out = l['out']
                        break
                    user_bal = us['bal']
                    m = bot.send_message(call.from_user.id,
                                         f'{emoji["vosk"]} –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É ‚Ç¥ —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏–≤–µ—Å—Ç–∏\n\n [–í—ñ–¥ {min_out}‚Ç¥]\n\n{emoji["dol"]} –í–∞—à –±–∞–ª–∞–Ω—Å {us["bal"]} ‚Ç¥')
                    bot.register_next_step_handler(m, approving_out, user_card, user_bal)
                    break
        else:
            bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–∫–∏' + emoji['bor'],reply_markup=markup)
    if call.data=='withdraw':
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception:
            pass
        for i in settings.find({}, {'out': 1, 'ref': 1}):
            min_out = float(i['out'])
            break
        xusc = usrs.find_one({'tgid': call.from_user.id})
        balan = xusc['bal']
        mb = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        mb.add(emoji['back'] + ' –ù–∞–∑–∞–¥')
        if balan >= min_out:
            l = bot.send_message(call.from_user.id, emoji[
                'card'] + f'*–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –í–∞—à–æ—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∫–∏ üá∫üá¶\n\n{emoji["redc"]} –ü—Ä–∏–∫–ª–∞–¥ :\n\n5168755910833956*',
                                 reply_markup=mb, parse_mode="Markdown")
            bot.register_next_step_handler(l, ask_mon)
        else:
            bot.send_message(call.from_user.id, f'_–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤_\n\n*–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:* {min_out}‚Ç¥\n*–í–∞—à –±–∞–ª–∞–Ω—Å*: {balan}‚Ç¥',parse_mode='Markdown',reply_markup=markup)
    elif call.data == 'sub':
        try:
            bot.delete_message(call.from_user.id, call.message.message_id)
        except Exception:
            bot.send_message(call.from_user.id, emoji["yep"])
        def check_ch(call):
            def ch(call):
                tr = True
                trsp = True
                for i in sponsors.find({}, {'_id': 1, 'id': 1, 'nick': 1, 'sub': 1}):
                    try:
                        if i['id'] != 1 and i['id'] != 2 and i['id'] != 3 and i['id'] != 4 and i['id'] != 5 and i['id']!=6 and i['id']!=7 and i['id']!=8 and i['id']!=9 and i['id']!=10:
                            st = bot.get_chat_member(i['id'], call.from_user.id).status
                            if st == 'member' or st == 'creator' or st == 'administrator':
                                tr = True
                            else:
                                tr = False
                                return False
                                break
                    except Exception as e:
                        bot.send_message(871076127, f"{e}\n\n{i['id']}")
                        if call.from_user.id == 871076127:
                            # bot.send_message(5288413290, e)
                            return True
                        else:
                            return False
                        break
                if tr:
                    return True
            if ch(call):
                for l in usrs.find({}, {'tgid': 1, 'bal': 1, 'pr': 1, 'get': 1, 'ref': 1}):
                    if l['tgid'] == call.from_user.id:
                        if l['get'] == 0:
                            try:
                                for n in settings.find({}, {'ref': 1}):
                                    ref_rew = float(n['ref'])
                                    break
                                usrs.update_one({'tgid': call.from_user.id},
                                                {"$set": {'get': 1}})
                                for u in usrs.find({}, {'tgid': 1, 'bal': 1, 'pr': 1, 'ref': 1}):
                                    if l['pr'] == u['tgid']:
                                        usrs.update_one({'tgid': l['pr']},
                                                        {"$set": {'ref': u['ref'] + 1,
                                                                  'bal': round(u['bal'] + ref_rew, 3)}})
                                        break
                                bot.send_message(l['pr'],
                                                 f'üéâ –í—ñ—Ç–∞—î–º–æ, –£ –≤–∞—Å –Ω–æ–≤–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª, –í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {ref_rew} ‚Ç¥ - @{call.from_user.username}')
                            except Exception as e:
                                print(e)
                        break
                b = ["üê≤ –ë–∞–ª–∞–Ω—Å üê≤", "üéé –ó–∞—Ä–æ–±–∏—Ç–∏ üéé",
                     "üçú –ó–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É üçú", "üåã –ü—Ä–∞–≤–∏–ª–∞ üåã", 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä']
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(b[0], b[1])
                markup.add(b[2], b[3])
                markup.add(b[4])
                bot.send_message(call.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=markup)
            else:
                bot.answer_callback_query(call.id, "–í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–µ –Ω–∞ –≤—Å—ñ—Ö —Å–ø–æ–Ω—Å–æ—Ä—ñ–≤ ‚ùó")
                inline_k = types.InlineKeyboardMarkup()
                c = 1
                lastsp = settings.find_one({})['lastsp']
                for i in sponsors.find({}, {'nick': 1, 'id': 1}):
                    if i['nick'][len(i['nick']) - 3:len(i['nick'])] == 'bot' or i['nick'][
                                                                                len(i['nick']) - 3:len(
                                                                                    i['nick'])] == 'Bot':
                        inline_bt = types.InlineKeyboardButton(f'({c}) –ë–æ—Ç (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start)', callback_data='vip',
                                                               url=f'https://t.me/{i["nick"]}')
                        inline_k.add(inline_bt)
                        c += 1
                    else:
                        if lastsp != i['id']:
                            inline_bt = types.InlineKeyboardButton(f'({c}) –ö–∞–Ω–∞–ª', callback_data='vip',
                                                                   url=f'https://t.me/{i["nick"]}')
                        else:
                            inline_bt = types.InlineKeyboardButton(f'({c}) –ö–∞–Ω–∞–ª üÜï', callback_data='vip',
                                                                   url=f'https://t.me/{i["nick"]}')
                        inline_k.add(inline_bt)
                        c += 1
                inline_bt = types.InlineKeyboardButton(f'{emoji["yep"]} –ü—ñ–¥–ø–∏—Å–∞–≤—Å—è', callback_data='sub')
                inline_k.add(inline_bt)
                bot.send_message(call.from_user.id,
                                 f'*–î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –±—É—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –Ω–∞ –∫–∞–Ω–∞–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—ñ–≤:*',
                                 reply_markup=inline_k, parse_mode='Markdown')
                # bot.register_next_step_handler(o, check_ch)

        check_ch(call)
    elif call.data == 'sub1':
        try:
            bot.delete_message(call.from_user.id, call.message.message_id)
        except Exception:
            bot.send_message(call.from_user.id, emoji["yep"])

        def check_ch(call):
            def ch(call):
                tr = True
                trsp = True
                for i in sponsors.find({}, {'_id': 1, 'id': 1, 'nick': 1, 'sub': 1}):
                    try:
                        if i['id'] != 1 and i['id'] != 2 and i['id'] != 3 and i['id'] != 4 and i['id'] != 5 and i['id']!=6 and i['id']!=7 and i['id']!=8 and i['id']!=9 and i['id']!=10:
                            st = bot.get_chat_member(i['id'], call.from_user.id).status
                            if st == 'member' or st == 'creator' or st == 'administrator':
                                tr = True
                            else:
                                tr = False
                                return False
                                break
                    except Exception as e:
                        bot.send_message(871076127, f"{e}\n\n{i['id']}")
                        if call.from_user.id == 871076127:
                            # bot.send_message(5288413290, e)
                            return True
                        else:
                            return False
                        break
                if tr:
                    return True
            if ch(call):
                for l in usrs.find({}, {'tgid': 1, 'bal': 1, 'pr': 1, 'get': 1}):
                    if l['tgid'] == call.from_user.id:
                        if l['get'] == 0:
                            try:
                                for n in settings.find({}, {'ref': 1}):
                                    ref_rew = float(n['ref'])
                                    break
                                for k in settings.find({}, {'sht': 1}):
                                    sht = k['sht']
                                    break
                                usrs.update_one({'tgid': call.from_user.id},
                                                {"$set": {'get': 1}})
                                for u in usrs.find({}, {'tgid': 1, 'bal': 1, 'pr': 1, 'ref': 1}):
                                    if l['pr'] == u['tgid']:
                                        usrs.update_one({'tgid': l['pr']},{"$set": {'bal': round(u['bal'] + sht, 2)}})
                                        break
                                bot.send_message(l['pr'], emoji['inf'] + f' @{call.from_user.username} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –±–æ—Ç–∞, –í–∞–º –ø–æ–≤–µ—Ä–Ω—É—Ç–æ {sht} ‚Ç¥')
                            except Exception as e:
                                print(e)
                        break
                b = ["üê≤ –ë–∞–ª–∞–Ω—Å üê≤", "üéé –ó–∞—Ä–æ–±–∏—Ç–∏ üéé",
                     "üçú –ó–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É üçú", "üåã –ü—Ä–∞–≤–∏–ª–∞ üåã", 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä']
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(b[0], b[1])
                markup.add(b[2], b[3])
                markup.add(b[4])
                bot.send_message(call.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=markup)
            else:
                bot.answer_callback_query(call.id, "–í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–µ –Ω–∞ –≤—Å—ñ—Ö —Å–ø–æ–Ω—Å–æ—Ä—ñ–≤ ‚ùó")
                inline_k = types.InlineKeyboardMarkup()
                c = 1
                lastsp = settings.find_one({})['lastsp']
                for i in sponsors.find({}, {'nick': 1, 'id': 1}):
                    if i['nick'][len(i['nick']) - 3:len(i['nick'])] == 'bot' or i['nick'][
                                                                                len(i['nick']) - 3:len(
                                                                                    i['nick'])] == 'Bot':
                        inline_bt = types.InlineKeyboardButton(f'({c}) –ë–æ—Ç (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start)', callback_data='vip',
                                                               url=f'https://t.me/{i["nick"]}')
                        inline_k.add(inline_bt)
                        c += 1
                    else:
                        if lastsp != i['id']:
                            inline_bt = types.InlineKeyboardButton(f'({c}) –ö–∞–Ω–∞–ª', callback_data='vip',
                                                                   url=f'https://t.me/{i["nick"]}')
                        else:
                            inline_bt = types.InlineKeyboardButton(f'({c}) –ö–∞–Ω–∞–ª üÜï', callback_data='vip',
                                                                   url=f'https://t.me/{i["nick"]}')
                        inline_k.add(inline_bt)
                        c += 1
                inline_bt = types.InlineKeyboardButton(f'{emoji["yep"]} –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É', callback_data='sub')
                inline_k.add(inline_bt)
                # mu_check = types.ReplyKeyboardMarkup(resize_keyboard=True)
                # mu_check.add('–ü—ñ–¥–ø–∏—Å–∞–≤—Å—è ' + emoji['yep'])
                #o = bot.send_message(call.from_user.id, f'{emoji["redcr"]}')
                bot.send_message(call.from_user.id,
                                 f'*–î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –±—É—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –Ω–∞ –∫–∞–Ω–∞–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—ñ–≤:*',
                                 reply_markup=inline_k, parse_mode='Markdown')
                # bot.register_next_step_handler(o, check_ch)
        check_ch(call)
    call3 = str(call.data)[:3]
    if call3 == 'ban':
        result = call.data[3:]
        tr = False
        for i in bans.find({}, {'tgid': 1}):
            if i['tgid'] == int(result):
                tr = True
                break
        if tr:
            bot.send_message(call.from_user.id, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ –±–∞–Ω—ñ')
        else:
            bans.insert_one({'tgid': int(result)})
            bot.send_message(call.from_user.id, f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{result}` –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ ‚úÖ', parse_mode='Markdown')
    elif call3 == 'unb':
        result = call.data[3:]
        tr = True
        for i in bans.find({}, {'tgid': 1}):
            if i['tgid'] == int(result):
                tr = False
                break
        if tr:
            bot.send_message(call.from_user.id, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –±–∞–Ω—ñ')
        else:
            bans.delete_one({'tgid': int(result)})
            bot.send_message(call.from_user.id, f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{result}` —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ ‚úÖ', parse_mode='Markdown')

# ==Launching the bot==
if __name__ == '__main__':
    while True:
        try:
            print('Telegram Bot is starting')
            bot.polling()
        except Exception as e:
            bot.send_message(871076127, str(e)+"\n\nrestarted")
            print('Network Issues with Telegram')
